.test_template: &test_definition
  # Uncomment below (and adjust as needed) to run the tests for specific references
  # only, such as the default branch, a `development` branch, and so on:
  # rules:
  #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  #   - if: $CI_COMMIT_BRANCH == "development"
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - julia -e 'using Pkg; Pkg.instantiate(); Pkg.build("SintPowerCase"); Pkg.test("SintPowerCase"; coverage = true)'
    # Comment out below if you do not want coverage results.
    - julia -e 'using Pkg; Pkg.add("Coverage");
      import SintPowerCase; cd(joinpath(dirname(pathof(SintPowerCase)), ".."));
      using Coverage; cl, tl = get_summary(process_folder());
      println("(", cl/tl*100, "%) covered")'

test:lts:
  image: julia:1.6.7
  <<: *test_definition

test:1.10:
  image: julia:1.10
  <<: *test_definition

pages:
  image: julia:1.10
  stage: deploy
  script:
    # - apt-get update -qq && apt-get install -y git # needed by Documenter
    - julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()' # Install dependencies
    - julia --color=yes docs/make.jl # make documentation
    - mv docs/build public # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
