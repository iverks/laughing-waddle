stages:
  - test_dev
  - test_main
  - deploy

test:latest:
  # Runs tests
  stage: test_dev
  image: julia:latest
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
  except:
    - main

test:master:
  # Runs tests and updates coverage badge
  stage: test_main
  image: julia:latest
  script:
    - julia --project=@. -e "import Pkg; Pkg.test(; coverage = true)"
    - julia --project=coverage -e 'import Pkg; Pkg.instantiate()'
    - |
      julia --project=@. --eval '
      import Pkg; Pkg.test(; coverage = true); Pkg.add("Coverage"); Pkg.instantiate()
      using Coverage
      processed = process_folder()
      covered_lines, total_lines = get_summary(processed)
      percentage = covered_lines / total_lines * 100
      return println("($(percentage)%) covered")'

  coverage: "/\\(\\d+.\\d+\\%\\) covered/"
  only:
    - main

format:
  stage: deploy
  image: julia:latest
  script:
    - julia -e '@info "Verifying formatting"'
    - |
      julia --eval '
      import Pkg
      Pkg.add("JuliaFormatter")
      using JuliaFormatter
      properly_formatted = format("./src"; verbose = true)

      if properly_formatted
        @info "Formatting verified"
      else 
        @info "Formatting failed - some files have not yet been formatted"
      end
      exit(properly_formatted ? 0 : 1)'
  only:
    - main

pages:
  stage: deploy
  image: julia:latest
  script:
    - "apt-get -qq update; apt-get -y install git"
    - |-
      julia --project=@. -e "import Pkg; Pkg.build()"
    - |-
      julia --project=docs -e 'using Pkg; Pkg.instantiate(); Pkg.add("Documenter"); Pkg.add("Dates"); Pkg.develop(PackageSpec(path=pwd()))'
    - julia --project=docs --color=yes docs/make.jl
    - mv docs/build public
  artifacts:
    paths:
      - public
  only:
    - main
    - merge_requests

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
